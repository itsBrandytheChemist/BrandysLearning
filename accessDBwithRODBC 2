#Load RODBC library
library(RODBC);

#DB connection string variables
dsn_driver = "IBM DB2 ODBC DRIVER"
dsn_database = "bludb"            
dsn_hostname = "b0aebb68-94fa-46ec-a1fc-1c999edb6187.c3n41cmd0nqnrk39u98g.databases.appdomain.cloud"   
dsn_port = "31249"                    
dsn_protocol = "TCPIP"            
dsn_uid = "nhl79077"            
dsn_pwd = "xacZ3RkpGprJW4Nj"            
dsn_security = "ssl"

#DB connection string and connection
conn_path = paste("DRIVER=",dsn_driver,
                  ";DATABASE=",dsn_database,
                  ";HOSTNAME=",dsn_hostname,
                  ";PORT=",dsn_port,
                  ";PROTOCOL=",dsn_protocol,
                  ";UID=",dsn_uid,
                  ";PWD=",dsn_pwd,
                  ";SECURITY=",dsn_security,        
                    sep="")
conn = odbcDriverConnect(conn_path)
conn

#close all connections
odbcCloseAll()

#close a specific connection
close(connection_name)

#view DB and driver information
sqlinfo <- sqlTypeInfo(conn)
conninfo <- odbcGetInfo(conn)
conninfo["DBMS_Name"]
conninfo["DBMS_Ver"] 
conninfo["Driver_ODBC_Ver"]

#drop tables in case they exist
myschema <- "NHL79077" # e.g. "ZJH17769"
tables <- c("BOARD", "SCHOOL")
    
    for (table in tables){  
      # Drop School table if it already exists
      out <- sqlTables(conn, tableType = "TABLE", schema = myschema, tableName =table)
      if (nrow(out)>0) {
        err <- sqlDrop (conn, paste(myschema,".",table,sep=""), errors=FALSE)  
        if (err==-1){
          cat("An error has occurred.\n")
          err.msg <- odbcGetErrMsg(conn)
          for (error in err.msg) {
            cat(error,"\n")
          }
        } else {
          cat ("Table: ",  myschema,".",table," was dropped\n")
        }
      } else {
          cat ("Table: ",  myschema,".",table," does not exist\n")
      }
    }

#Create BOARD table in database
df1 <- sqlQuery(conn, "CREATE TABLE BOARD (
                            B_ID CHAR(6) NOT NULL, 
                            B_NAME VARCHAR(75) NOT NULL, 
                            TYPE VARCHAR(50) NOT NULL, 
                            LANGUAGE VARCHAR(50), 
                            PRIMARY KEY (B_ID))", 
                errors=FALSE)


#check if table created successfully
if (df1 == -1){
  cat ("An error has occurred.\n")
  msg <- odbcGetErrMsg(conn)
  print (msg)
} else {
  cat ("Table was created successfully.\n")
}

#create SCHOOL table in database
df2 <- sqlQuery(conn, "CREATE TABLE SCHOOL (
                  B_ID CHAR(6) NOT NULL, 
                  S_ID CHAR(6) NOT NULL, 
                  S_NAME VARCHAR(100), 
                  LEVEL VARCHAR(70), 
                  ENROLLMENT INTEGER WITH DEFAULT 10,
                  PRIMARY KEY (B_ID, S_ID))", errors=FALSE)


#check if table created successfully
if (df2 == -1){
  cat ("An error has occurred.\n")
  msg <- odbcGetErrMsg(conn)
  print (msg)
} else {
  cat ("Table was created successfully.\n")
}

#fetch the tables present in the current database schema
tab.frame <- sqlTables(conn, schema=myschema)
nrow(tab.frame)
tab.frame$TABLE_NAME

#print col #4, 6, 7, 18 from both tables
for (table in tables){  
        cat ("\nColumn info for table", table, ":\n")
        col.detail <- sqlColumns(conn, table)
        print(col.detail[c(4,6,7,18)], row.names=FALSE)
}

#load data from the board.csv into the BOARD data frame (these are the "solution")
boarddf <- read.csv("/resources/data/samples/osb/board.csv", header = FALSE)

#it worked when I did 
board_csv_string <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0103EN-SkillsNetwork/labs/Lab%20-%20Creating%20and%20Querying%20Database%20Objects%20from%20R/board.csv"
boarddf <- read.csv(board_csv_string, header = FALSE)

#save the data frame to the database table BOARD
sqlSave(conn, boarddf, "BOARD", append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)

#load data from the school.csv into the SCHOOL data frame
school_csv_string <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0103EN-SkillsNetwork/labs/Lab%20-%20Creating%20and%20Querying%20Database%20Objects%20from%20R/school.csv"
schooldf <- read.csv(school_csv_string, header=FALSE)

#change the encoding from the 3rd column char vector from "latin1" to "ASCII//TRANSLIT"
schooldf$V3 <- iconv(schooldf$V3, "latin1", "ASCII//TRANSLIT")

#save the data from to the database table SCHOOL (note, this takes a long time b/c there is a lot of data. may be better to use native LOAD utility in the database 
sqlSave(conn, schooldf, "SCHOOL", append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)

#fetch data from the db table BOARD and SCHOOL
boarddb <- sqlFetch(conn, "BOARD")
schooldb <- sqlFetch(conn, "SCHOOL")

#open ggplot2 library
library(ggplot2)

#get elementary school data from the db in both tables in descending sequence
elequery <- query <- paste("select s.enrollment as ENROLLMENT 
from school s, board b 
where b.b_name = 'Toronto DSB' and b.b_id=s.b_id 
and s.level = 'Elementary' 
order by enrollment desc")

#create elementary school df
eledf <- sqlQuery(conn, elequery)
dim(eledf)

#create a density plot of elem school enrollments
qplot(ENROLLMENT, data=eledf, geom="density",  main="TDSB School Size - Elementary")

#get secondary school data from the db in both tables in descending sequence
secquery <- paste("select s.enrollment as ENROLLMENT 
from school s, board b 
where b.b_name = 'Toronto DSB' and b.b_id=s.b_id 
and s.level = 'Secondary' 
order by enrollment desc")

#create the secondary school df
secdf <- sqlQuery(conn, secquery)

#create a density plot of secondary school enrollments
qplot(ENROLLMENT, data=secdf, geom="density", main="TDSB School Size - Secondary")

#Warning message: “Removed 2 rows containing non-finite values (stat_density).” But graph was returned.

#query the BOARD db for enrollments
denquery <- paste("select b.b_name, s.s_name, level as LEVEL, enrollment 
 from board b, school s where b.b_id = s.b_id and b.b_name = 'Toronto DSB'")

dendf <- sqlQuery(conn, denquery)





