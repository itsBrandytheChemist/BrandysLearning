#load .csv files and check them out
crop_data_csv <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Practice%20Assignment/Annual_Crop_Data.csv"
cropdf <- read.csv(crop_data_csv, header=FALSE)
head(cropdf)
exch_rate_csv <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-RP0203EN-SkillsNetwork/labs/Practice%20Assignment/Daily_FX.csv"
exchdf <- read.csv(exch_rate_csv, header=FALSE)
head(exchdf)

#discovered column names were in first row --> make names out of that row, then delete it
names(cropdf) <-as.matrix(cropdf[1,])
cropdf <- (cropdf[-1,])
head(cropdf)
names(exchdf) <-as.matrix(exchdf[1,])
exchdf <- (exchdf[-1,])
head(exchdf)

#convert date columns to <chr>
cropdf$V2 <- as.character(cropdf$V2)
head(cropdf)
exchdf$V2 <- as.character(exchdf$V2)
head(exchdf)

#connect to db via RODBC
#Load RODBC library
library(RODBC)

#DB connection string variables
dsn_driver = "IBM DB2 ODBC DRIVER" #found this connection string on connectionstrings.com
dsn_database = "bludb"            
dsn_hostname = "b0aebb68-94fa-46ec-a1fc-1c999edb6187.c3n41cmd0nqnrk39u98g.databases.appdomain.cloud"    #from my db instance
dsn_port = "31249"  #from my db instance
dsn_protocol = "TCPIP"            
dsn_uid = "nhl79077"  #from my db instance
dsn_pwd = "xacZ3RkpGprJW4Nj"  #from my db instance credentials
dsn_security = "ssl"

#DB connection string and connection
conn_path = paste("DRIVER=",dsn_driver,
                  ";DATABASE=",dsn_database,
                  ";HOSTNAME=",dsn_hostname,
                  ";PORT=",dsn_port,
                  ";PROTOCOL=",dsn_protocol,
                  ";UID=",dsn_uid,
                  ";PWD=",dsn_pwd,
                  ";SECURITY=",dsn_security,        
                    sep="")
conn = odbcDriverConnect(conn_path)
conn
#returns connection details

#view DB and driver information
sqlinfo <- sqlTypeInfo(conn)
conninfo <- odbcGetInfo(conn)
conninfo["DBMS_Name"]
conninfo["DBMS_Ver"] 
conninfo["Driver_ODBC_Ver"]
#returns info

#check whether tables named CROP_DATA and DAILY_FX already exist in the database, and drop if so
myschema <- "NHL79077" #from my db instance
tables <- c("CROP_DATA", "DAILY_FX")
for (table in tables){  
    out <- sqlTables(conn, tableType = "TABLE", schema = myschema, tableName =table)
      if (nrow(out)>0) {
        err <- sqlDrop (conn, paste(myschema,".",table,sep=""), errors=FALSE)  
        if (err==-1){
          cat("An error has occurred.\n")
          err.msg <- odbcGetErrMsg(conn)
          for (error in err.msg) {
            cat(error,"\n")
          }
        } else {
          cat ("Table: ",table," just got dropped!\n")
        }
      } else {
          cat ("What made you think", table," existed anyway?\n")
      }
    }

#Create CROP_DATA table in database 
cropdf <- sqlQuery(conn, "CREATE TABLE CROP_DATA (
                            CD_ID INTEGER NOT NULL, 
                            YEAR CHAR(10) NOT NULL, 
                            CROP_TYPE VARCHAR(50) NOT NULL, 
                            GEO VARCHAR(50),
                            SEEDED_AREA INTEGER,
                            HARVESTED_AREA INTEGER,
                            PRODUCTION INTEGER,
                            AVG_YIELD INTEGER,
                            PRIMARY KEY (CD_ID))", 
                errors=FALSE)
#check if CROP_DATA table created successfully
if (cropdf == -1){
  cat ("An error has occurred.\n")
  msg <- odbcGetErrMsg(conn)
  print (msg)
} else {
  cat ("CROP_DATA table was created successfully.\n")
}

#Create DAILY_FX table in database
fxdf <- sqlQuery(conn, "CREATE TABLE DAILY_FX (
                            DFX_ID INTEGER NOT NULL, 
                            DATE CHAR(10) NOT NULL, 
                            FXUSDCAD FLOAT,
                            PRIMARY KEY (DFX_ID))", 
                errors=FALSE)
#check if DAILY_FX table created successfully
if (fxdf == -1){
  cat ("An error has occurred.\n")
  msg <- odbcGetErrMsg(conn)
  print (msg)
} else {
  cat ("DAILY_FX table was created successfully.\n")
}

#load data from cropdf and exchdf (R dataframes) into CROP_DATA and DAILY_FX (db tables)

sqlSave(conn, cropdf, "CROP_DATA", append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)
sqlSave(conn, exchdf, "DAILY_FX", append=TRUE, fast=FALSE, rownames=FALSE, colnames=FALSE, verbose=FALSE)

#followed by so many SQL practice queries
#which crops had avg_yield >= 3000?
query = 
"select distinct(CROP_TYPE) from CROP_DATA
    WHERE AVG_YIELD >= 3000"
sqlQuery=(conn, query)

#then on my own I felt like trying to show the above result but adding a column showing the avg(avg_yield) for each crop type
#I didn't get there, but I got close...
#Close result 1: I was able to make the table of crops having avg_yield >= 3000 and the avg(avg_yield) for all rows:
query = 
"select distinct(CROP_TYPE),
                (SELECT AVG(AVG_YIELD) AS AVG FROM CROP_DATA)
        from CROP_DATA
        where AVG_YIELD >= 3000;"
sqlQuery=(conn, query)
#Turns out this snippet has the same result:
query = 
"select CROP_TYPE,
                (SELECT AVG(AVG_YIELD) AS AVG FROM CROP_DATA)
        from CROP_DATA
        where AVG_YIELD >= 3000
        group by CROP_TYPE;"
sqlQuery=(conn, query)

#Close result 2: I was able to make a table of ALL crops and their avg(avg_yield):
query = 
"select CROP_TYPE, AVG(AVG_YIELD) AS AVG FROM CROP_DATA
        group by CROP_TYPE;"
sqlQuery=(conn, query)

#As a side note, I was able test when you do/don't need nested select for aggregate functions
#I think you can only select an aggregate function AVG() along with another column if there is a GROUP BY clause
#the following code will fail for this reason, but works if you add GROUP BY CROP_TYPE
query = 
"SELECT CROP_TYPE, AVG(AVG_YIELD) AS AVG FROM CROP_DATA"
sqlQuery(conn, query)

#Select top 10 years of wheat production in Saskatchewan in terms of harvested area
query = 
"SELECT YEAR, HARVESTED_AREA FROM CROP_DATA
        WHERE GEO='Saskatchewan'
        ORDER BY HARVESTED_AREA DESC
        LIMIT 10"
sqlQuery(conn, query)

#How much farmland in Alberta was seeded with Barley but not harvested each year since 2000?
#express in % seeded area that was harvested
query <-  
"SELECT YEAR(YEAR) AS YEAR, 
            100*(SEEDED_AREA-HARVESTED_AREA)/SEEDED_AREA AS PCT_UNHARVESTED_AREA
    FROM CROP_DATA
    WHERE YEAR(YEAR) >= 2000 AND
          GEO = 'Alberta' AND
          CROP_TYPE = 'Barley';"
sqlQuery(conn,query)

